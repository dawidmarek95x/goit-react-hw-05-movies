{"version":3,"file":"static/js/910.1393cff9.chunk.js","mappings":"8MAyCA,IAtC2B,SAACA,EAASC,GACnC,IAGIC,EAHJ,GAA0BC,EAAAA,EAAAA,UAAS,CAAC,GAApC,eAAOC,EAAP,KAAcC,EAAd,KACA,GAA6BF,EAAAA,EAAAA,WAAS,GAAtC,eAAOG,EAAP,KAAgBC,EAAhB,KAGA,OAAQN,GACN,IAAK,UACHC,EAAgB,WAChB,MAEF,IAAK,UACHA,EAAgB,WAClB,MAEA,QACEA,EAAgB,GAoBpB,OAhBAM,EAAAA,EAAAA,YAAU,WACR,IAAMC,EAAY,mCAAG,2FACnBF,GAAU,GADS,kBAIMG,IAAAA,IAAA,6CAAgDV,GAAhD,OAA0DE,EAA1D,8CAJN,cAIXS,EAJW,gBAKXN,EAASM,EAASC,MALP,uDAOjBC,QAAQC,IAAR,MAPiB,yBASjBP,GAAU,GATO,4EAAH,qDAYlBE,GACD,GAAE,CAACT,EAASE,IAEN,CAACE,MAAAA,EAAOE,QAAAA,EAChB,C,sHC5BD,EAToB,SAAC,GAAc,IAAbS,EAAY,EAAZA,OACpB,OACE,2BACE,qCAAaA,EAAOC,WACpB,uBAAID,EAAOE,YAGhB,ECSD,EAfoB,SAAC,GAAiB,IAAfC,EAAc,EAAdA,QACrB,OACE,gCACuB,KAAb,OAAPA,QAAO,IAAPA,OAAA,EAAAA,EAASC,UAAgB,sEAClB,OAAPD,QAAO,IAAPA,OAAA,EAAAA,EAASC,QAAS,IACjB,+BACGD,QADH,IACGA,OADH,EACGA,EAASE,KAAI,SAAAL,GAAM,OAClB,SAAC,EAAD,CAA6BA,OAAQA,GAAnBA,EAAOM,GADP,QAO7B,ECGD,EAbgB,WACd,IAAQrB,GAAYsB,EAAAA,EAAAA,MAAZtB,QACR,GAA2BuB,EAAAA,EAAAA,GAAmBvB,EAAS,WAA/CI,EAAR,EAAQA,MAAOE,EAAf,EAAeA,QAETY,EAAUd,EAAMoB,QACtB,OACE,gCACGlB,IAAW,SAACmB,EAAA,EAAD,KACVnB,IAAW,SAAC,EAAD,CAAaY,QAASA,MAGxC,C","sources":["hooks/useFetchMoviesById.js","components/Reviews/ReviewsItem.jsx","components/Reviews/ReviewsList.jsx","pages/Reviews.jsx"],"sourcesContent":["import axios from 'axios';\nimport { useEffect, useState } from 'react'\n\nconst useFetchMoviesById = (movieId, urlParameter) => {\n  const [movie, setMovie] = useState({});\n  const [loading, isLoading] = useState(false);\n\n  let parameterPath;\n  switch (urlParameter) {\n    case \"credits\":\n      parameterPath = \"/credits\";\n      break;\n\n    case \"reviews\":\n      parameterPath = \"/reviews\";\n    break;\n  \n    default:\n      parameterPath = \"\";\n      break;\n  }\n\n  useEffect(() => {\n    const getMovieById = async () => {\n      isLoading(true);\n  \n      try {\n        const response = await axios.get(`https://api.themoviedb.org/3/movie/${movieId}${parameterPath}?api_key=80dd3433372e51907072dd17bd29b086`);\n        await setMovie(response.data);\n      } catch (error) {\n        console.log(error);\n      } finally {\n        isLoading(false);\n      }\n    };\n    getMovieById();\n  }, [movieId, parameterPath]);\n\n  return {movie, loading};\n}\n\nexport default useFetchMoviesById;","import React from 'react'\n\nconst ReviewsItem = ({review}) => {\n  return (\n    <li>\n      <h3>Author: {review.author}</h3>\n      <p>{review.content}</p>\n    </li>\n  )\n}\n\nexport default ReviewsItem","import React from 'react';\nimport ReviewsItem from './ReviewsItem';\n\nconst ReviewsList = ({ reviews }) => {\n  return (\n    <>\n      {reviews?.length === 0 && <p>We don't have any reviews for this movie.</p>}\n      {reviews?.length > 0 && (\n        <ul>\n          {reviews?.map(review => (\n            <ReviewsItem key={review.id} review={review} />\n          ))}\n        </ul>\n      )}\n    </>\n  );\n};\n\nexport default ReviewsList;\n","import React from 'react';\nimport { useParams } from 'react-router-dom';\nimport useFetchMoviesById from '../hooks/useFetchMoviesById';\nimport Loader from '../components/Loader/Loader';\nimport ReviewsList from '../components/Reviews/ReviewsList';\n\nconst Reviews = () => {\n  const { movieId } = useParams();\n  const { movie, loading } = useFetchMoviesById(movieId, 'reviews');\n\n  const reviews = movie.results;\n  return (\n    <>\n      {loading && <Loader />}\n      {!loading && <ReviewsList reviews={reviews} />}\n    </>\n  );\n};\n\nexport default Reviews;\n"],"names":["movieId","urlParameter","parameterPath","useState","movie","setMovie","loading","isLoading","useEffect","getMovieById","axios","response","data","console","log","review","author","content","reviews","length","map","id","useParams","useFetchMoviesById","results","Loader"],"sourceRoot":""}