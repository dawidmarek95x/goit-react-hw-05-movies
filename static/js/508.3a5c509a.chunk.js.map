{"version":3,"file":"static/js/508.3a5c509a.chunk.js","mappings":"yMAEaA,E,QAAMC,GAAAA,IAAH,8EAED,SAAAC,GAAK,uBAAIA,EAAMC,gBAAV,QAAsB,OAAtB,I,mBCcpB,EAduB,SAAC,GAAkC,IAAhCC,EAA+B,EAA/BA,IAAKC,EAA0B,EAA1BA,IAAKC,EAAqB,EAArBA,MAAOH,EAAc,EAAdA,SACzC,GAA4BI,EAAAA,EAAAA,UAASH,GAArC,eAAOI,EAAP,KAAeC,EAAf,KAKA,OACE,iCACIH,IAAS,SAACN,EAAD,CAAKG,SAAUA,EAAUC,IAAKM,EAAkBL,IAAKA,IAC/DC,IAAS,SAACN,EAAD,CAAKG,SAAUA,EAAUQ,QAPlB,WACnBF,EAAUC,EACX,EAK6DN,IAAKI,EAAQH,IAAKA,MAGjF,C,8FCyBD,IAtC2B,SAACO,EAASC,GACnC,IAGIC,EAHJ,GAA0BP,EAAAA,EAAAA,UAAS,CAAC,GAApC,eAAOQ,EAAP,KAAcC,EAAd,KACA,GAA6BT,EAAAA,EAAAA,WAAS,GAAtC,eAAOU,EAAP,KAAgBC,EAAhB,KAGA,OAAQL,GACN,IAAK,UACHC,EAAgB,WAChB,MAEF,IAAK,UACHA,EAAgB,WAClB,MAEA,QACEA,EAAgB,GAoBpB,OAhBAK,EAAAA,EAAAA,YAAU,WACR,IAAMC,EAAY,mCAAG,2FACnBF,GAAU,GADS,kBAIMG,IAAAA,IAAA,6CAAgDT,GAAhD,OAA0DE,EAA1D,8CAJN,cAIXQ,EAJW,gBAKXN,EAASM,EAASC,MALP,uDAOjBC,QAAQC,IAAR,MAPiB,yBASjBP,GAAU,GATO,4EAAH,qDAYlBE,GACD,GAAE,CAACR,EAASE,IAEN,CAACC,MAAAA,EAAOE,QAAAA,EAChB,C,qICrCYS,EAAOzB,EAAAA,GAAAA,GAAH,2S,SCkBjB,EAhBiB,SAAC,GAAc,IAAZ0B,EAAW,EAAXA,KAClB,OACE,UAACD,EAAD,YACE,0BACE,SAACE,EAAA,EAAD,CACExB,IAAG,yCAAoCuB,EAAKE,cAC5CxB,IAAKsB,EAAKG,KACVxB,MAAOqB,EAAKE,kBAGhB,wBAAKF,EAAKG,QACV,uCAAeH,EAAKI,eAGzB,EChBYC,EAAO/B,EAAAA,GAAAA,GAAH,2LCmBjB,EAjBiB,SAAC,GAAe,IAAbgC,EAAY,EAAZA,MAClB,OACE,gCACqB,KAAb,OAALA,QAAK,IAALA,OAAA,EAAAA,EAAOC,UACN,qFAEI,OAALD,QAAK,IAALA,OAAA,EAAAA,EAAOC,QAAS,IACf,SAACF,EAAD,iBACGC,QADH,IACGA,OADH,EACGA,EAAOE,KAAI,SAAAR,GAAI,OACd,SAAC,EAAD,CAA6BA,KAAMA,GAApBA,EAAKS,QADN,QAOzB,E,UCGD,EAhBa,WACX,IAAQxB,GAAYyB,EAAAA,EAAAA,MAAZzB,QACR,GAA2B0B,EAAAA,EAAAA,GAAmB1B,EAAS,WAA/CG,EAAR,EAAQA,MAAOE,EAAf,EAAeA,QAETgB,EAAQlB,EAAMY,KAEpB,OACE,gCACGV,IAAW,SAACsB,EAAA,EAAD,KACVtB,IACA,SAAC,EAAD,CAAUgB,MAAOA,MAIxB,C","sources":["components/ImageWithCheck/ImageWithCheck.styled.js","components/ImageWithCheck/ImageWithCheck.jsx","hooks/useFetchMoviesById.js","components/Cast/CastItem.styled.js","components/Cast/CastItem.jsx","components/Cast/CastList.styled.js","components/Cast/CastList.jsx","pages/Cast/Cast.jsx"],"sourcesContent":["import styled from \"styled-components\";\n\nexport const Img = styled.img`\n  display: block;\n  max-width: ${props => props.maxWidth ?? \"300px\"};\n  width: 100%;\n`;","import { useState } from \"react\";\nimport { Img } from \"./ImageWithCheck.styled\";\nimport NoImageAvailable from \"../../images/NoImageAvailable.png\"\n\nconst ImageWithCheck = ({ src, alt, check, maxWidth}) => {\n  const [imgSrc, setImgSrc] = useState(src);\n  const errorHandler = () => {\n    setImgSrc(NoImageAvailable);\n  }\n\n  return (\n    <>\n      {!check && <Img maxWidth={maxWidth} src={NoImageAvailable} alt={alt} />}\n      {check && <Img maxWidth={maxWidth} onError={errorHandler} src={imgSrc} alt={alt} />}\n    </>\n  );\n};\n\nexport default ImageWithCheck;\n","import axios from 'axios';\nimport { useEffect, useState } from 'react'\n\nconst useFetchMoviesById = (movieId, urlParameter) => {\n  const [movie, setMovie] = useState({});\n  const [loading, isLoading] = useState(false);\n\n  let parameterPath;\n  switch (urlParameter) {\n    case \"credits\":\n      parameterPath = \"/credits\";\n      break;\n\n    case \"reviews\":\n      parameterPath = \"/reviews\";\n    break;\n  \n    default:\n      parameterPath = \"\";\n      break;\n  }\n\n  useEffect(() => {\n    const getMovieById = async () => {\n      isLoading(true);\n  \n      try {\n        const response = await axios.get(`https://api.themoviedb.org/3/movie/${movieId}${parameterPath}?api_key=80dd3433372e51907072dd17bd29b086`);\n        await setMovie(response.data);\n      } catch (error) {\n        console.log(error);\n      } finally {\n        isLoading(false);\n      }\n    };\n    getMovieById();\n  }, [movieId, parameterPath]);\n\n  return {movie, loading};\n}\n\nexport default useFetchMoviesById;","import styled from \"styled-components\";\n\nexport const Item = styled.li`\n  padding-bottom: 10px;\n  border: 1px solid grey;\n  border-radius: 15px;\n  text-align: center;\n  background-color: lightgray;\n  overflow: hidden;\n\n  & img {\n    border-bottom: 1px solid grey;\n  }\n\n  & h3 {\n    margin: 5px 0;\n  }\n\n  & p {\n    margin: 0;\n  }\n`;","import React from 'react';\nimport ImageWithCheck from '../ImageWithCheck/ImageWithCheck';\nimport { Item } from './CastItem.styled';\n\nconst CastItem = ({ cast }) => {\n  return (\n    <Item>\n      <div>\n        <ImageWithCheck\n          src={`https://image.tmdb.org/t/p/w500${cast.profile_path}`}\n          alt={cast.name}\n          check={cast.profile_path}\n        />\n      </div>\n      <h3>{cast.name}</h3>\n      <p>Character: {cast.character}</p>\n    </Item>\n  );\n};\n\nexport default CastItem;\n","import styled from \"styled-components\";\n\nexport const Cast = styled.ul`\n  display: grid;\n  grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));\n  gap: 20px;\n  justify-items: center;\n  padding: 0;\n  list-style-type: none;\n`;","import React from 'react';\nimport CastItem from './CastItem';\nimport { Cast } from './CastList.styled';\n\nconst CastList = ({ casts }) => {\n  return (\n    <>\n      {casts?.length === 0 && (\n        <p>We don't have any information about cast for this movie.</p>\n      )}\n      {casts?.length > 0 && (\n        <Cast>\n          {casts?.map(cast => (\n            <CastItem key={cast.cast_id} cast={cast} />\n          ))}\n        </Cast>\n      )}\n    </>\n  );\n};\n\nexport default CastList;\n","import React from 'react';\nimport { useParams } from 'react-router-dom';\nimport useFetchMoviesById from '../../hooks/useFetchMoviesById';\nimport CastList from '../../components/Cast/CastList';\nimport Loader from '../../components/Loader/Loader';\n\nconst Cast = () => {\n  const { movieId } = useParams();\n  const { movie, loading } = useFetchMoviesById(movieId, 'credits');\n\n  const casts = movie.cast;\n\n  return (\n    <>\n      {loading && <Loader />}\n      {!loading && (\n        <CastList casts={casts}/>\n      )}\n    </>\n  );\n};\n\nexport default Cast;\n"],"names":["Img","styled","props","maxWidth","src","alt","check","useState","imgSrc","setImgSrc","NoImageAvailable","onError","movieId","urlParameter","parameterPath","movie","setMovie","loading","isLoading","useEffect","getMovieById","axios","response","data","console","log","Item","cast","ImageWithCheck","profile_path","name","character","Cast","casts","length","map","cast_id","useParams","useFetchMoviesById","Loader"],"sourceRoot":""}