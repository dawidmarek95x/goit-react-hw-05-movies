{"version":3,"file":"static/js/312.e1930a67.chunk.js","mappings":"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","sources":["components/ImageWithCheck/ImageWithCheck.styled.js","components/ImageWithCheck/ImageWithCheck.jsx","components/Movies/MoviesList.styled.js","components/Movies/MoviesList.jsx","components/Movies/MoviesSearchbar.styled.js","components/Movies/MoviesSearchbar.jsx","pages/MoviesPage/MoviesPage.jsx","services/movieApi.js"],"sourcesContent":["import styled from \"styled-components\";\n\nexport const Img = styled.img`\n  display: block;\n  max-width: ${props => props.maxWidth ?? \"300px\"};\n  width: 100%;\n`;","import { useState } from \"react\";\nimport { Img } from \"./ImageWithCheck.styled\";\nimport NoImageAvailable from \"../../images/NoImageAvailable.png\"\nimport PropTypes from 'prop-types';\n\nconst ImageWithCheck = ({ src, alt, check, maxWidth}) => {\n  const [imgSrc, setImgSrc] = useState(src);\n  const errorHandler = () => {\n    setImgSrc(NoImageAvailable);\n  }\n\n  return (\n    <>\n      {!check && <Img maxWidth={maxWidth} src={NoImageAvailable} alt={alt} />}\n      {check && <Img maxWidth={maxWidth} onError={errorHandler} src={imgSrc} alt={alt} />}\n    </>\n  );\n};\n\nImageWithCheck.propTypes = {\n  src: PropTypes.string.isRequired,\n  alt: PropTypes.string.isRequired,\n  check: PropTypes.string,\n  maxWidth: PropTypes.string,\n};\n\nexport default ImageWithCheck;\n","import styled from \"styled-components\";\n\nconst borderRadius = \"10px\";\n\nexport const List = styled.ul`\n  display: grid;\n  grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));\n  gap: 20px;\n  justify-items: center;\n  padding: 0 20px;\n  list-style-type: none;\n\n  & li {\n    border: 1px solid black;\n    border-radius: ${borderRadius};\n    background-color: lightgray;\n\n    &:hover {\n      border-color: gray;\n      box-shadow: -1px -1px 3px 1px black, 1px 1px 3px 1px black;\n    }\n  }\n\n  & a {\n    color: black;\n    text-decoration: none;\n\n    & p {\n      display: flex;\n      justify-content: center;\n      align-items: center;\n      margin: 0;\n      padding: 5px;\n      font-weight: 500;\n    }\n  }\n`;\n\nexport const ImgWrapper = styled.div`\n  border-top-left-radius: ${borderRadius};\n  border-top-right-radius: ${borderRadius};\n  overflow: hidden;\n  border-bottom: 1px solid black;\n`;","import ImageWithCheck from 'components/ImageWithCheck/ImageWithCheck';\nimport React from 'react'\nimport { Link, useLocation } from 'react-router-dom';\nimport { ImgWrapper, List } from './MoviesList.styled';\nimport PropTypes from 'prop-types';\n\nconst MoviesList = ({movies}) => {\n  let location = useLocation();\n\n  return (\n    <List>\n      {movies.map(movie => (\n        <li key={movie.id}>\n          <Link\n            to={`/movies/${movie.id}`}\n            state={{ \n              from: location,\n            }}\n          >\n            <ImgWrapper>\n              <ImageWithCheck src={`https://image.tmdb.org/t/p/w500${movie.poster_path}`} alt={movie.title} check={movie.poster_path}/>\n            </ImgWrapper>\n            <p>{movie.title}</p>\n          </Link>\n        </li>\n      ))}\n    </List>\n  )\n}\n\nMoviesList.propTypes = {\n  movies: PropTypes.arrayOf(PropTypes.object).isRequired,\n};\n\nexport default MoviesList","import styled from \"styled-components\";\n\nexport const SearchbarWrapper = styled.div`\n  padding: 10px 20px;\n`;\n\nexport const Searchbar = styled.form`\n  display: flex;\n  border: 1px solid grey;\n  border-radius: 10px;\n  width: min-content;\n  overflow: hidden;\n\n  & input {\n    padding: 5px 10px;\n    outline: none;\n    border: none;\n    font-size: 18px;\n    line-height: 1.2;\n  }\n\n  & button {\n    display: flex;\n    align-items: center;\n    justify-content: center;\n    border: none;\n    border-left: 1px solid gray;\n    color: white;\n    background-color: black;\n    cursor: pointer;\n    transition: background-color 600ms, color 600ms;\n\n    &:hover {\n      color: white;\n      background-color: #B30303;\n      transition: background-color 400ms, color 400ms;\n    }\n\n    & svg {\n      margin-right: 5px;\n    }\n  }\n\n  &:focus-within {\n    box-shadow: -1px -1px 3px 1px black, 1px 1px 3px 1px black;\n  }\n`;","import React from 'react'\nimport { Searchbar, SearchbarWrapper } from './MoviesSearchbar.styled';\nimport { BsSearch } from \"react-icons/bs\";\nimport PropTypes from 'prop-types';\n\nconst MoviesSearchbar = ({value, submitHandler, changeHandler}) => {\n  return (\n    <SearchbarWrapper>\n      <Searchbar onSubmit={submitHandler}>\n        <input\n          type=\"text\"\n          value={value}\n          onChange={changeHandler}\n        />\n        <button type=\"submit\"><BsSearch />Search</button>\n      </Searchbar>\n    </SearchbarWrapper>\n  );\n};\n\nMoviesSearchbar.propTypes = {\n  value: PropTypes.string.isRequired,\n  submitHandler: PropTypes.func.isRequired,\n  changeHandler: PropTypes.func.isRequired,\n}\n\nexport default MoviesSearchbar;","import MoviesList from 'components/Movies/MoviesList';\nimport MoviesSearchbar from '../../components/Movies/MoviesSearchbar';\nimport React, { useCallback, useEffect } from 'react';\nimport { useState } from 'react';\nimport { Outlet, useParams, useSearchParams } from 'react-router-dom';\nimport { getMoviesByQuery } from 'services/movieApi';\n\nconst MoviesPage = () => {\n  const params = useParams();\n  const [queryValue, setQueryValue] = useState('');\n  const [searchParams, setSearchParams] = useSearchParams();\n  const [moviesByQuery, setMoviesByQuery] = useState([]);\n\n  const queryChangeHandler = (e) => {\n    setQueryValue(e.target.value);\n  };\n\n  const querySubmitHandler = (e) => {\n    e.preventDefault();\n\n    if (!queryValue) {\n      alert(\"Complete the search field!\");\n    }\n\n    queryValue ? setSearchParams({ query: queryValue }) : setSearchParams('');\n\n    setQueryValue('');\n  };\n\n  const getWantedMovies = useCallback(async () => {\n    try {\n      const query = searchParams.get('query');\n      if (query) {\n        const moviesList = await getMoviesByQuery(query);\n        setMoviesByQuery(moviesList);\n      }\n    } catch (error) {\n      console.log(error);\n    }\n  }, [searchParams]);\n\n  useEffect(() => {\n    getWantedMovies();\n  }, [getWantedMovies]);\n\n  return (\n    <>\n      {!params.movieId && (\n        <>\n          <MoviesSearchbar\n            value={queryValue}\n            submitHandler={querySubmitHandler}\n            changeHandler={queryChangeHandler}\n          />\n          <MoviesList movies={moviesByQuery} />\n        </>\n      )}\n      {params.movieId && (\n        <>\n          <Outlet />\n        </>\n      )}\n    </>\n  );\n};\n\nexport default MoviesPage;\n","import axios from 'axios';\nconst apiKey = \"80dd3433372e51907072dd17bd29b086\";\n\nexport const getTrendyMovies = async (periodOfTime) => {\n  try {\n    (periodOfTime === \"week\")\n      ? periodOfTime = \"week\"\n      : periodOfTime = \"day\";\n\n    const response = await axios.get(\n      `https://api.themoviedb.org/3/trending/movie/${periodOfTime}?api_key=${apiKey}`\n    );\n    return response.data.results;\n  } catch (error) {\n    console.log(error);\n  };\n};\n\nexport const getMoviesByQuery = async (query) => {\n  try {\n    const response = await axios.get(\n      `https://api.themoviedb.org/3/search/movie?api_key=${apiKey}&query=${query}&page=1&include_adult=false`\n    );\n    return response.data.results;\n  } catch (error) {\n    console.log(error);\n  }\n};"],"names":["Img","styled","props","maxWidth","src","alt","check","useState","imgSrc","setImgSrc","NoImageAvailable","onError","borderRadius","List","ImgWrapper","movies","location","useLocation","map","movie","to","id","state","from","ImageWithCheck","poster_path","title","SearchbarWrapper","Searchbar","value","submitHandler","changeHandler","onSubmit","type","onChange","params","useParams","queryValue","setQueryValue","useSearchParams","searchParams","setSearchParams","moviesByQuery","setMoviesByQuery","getWantedMovies","useCallback","query","get","getMoviesByQuery","moviesList","console","log","useEffect","movieId","e","preventDefault","alert","target","MoviesList","apiKey","getTrendyMovies","periodOfTime","axios","response","data","results"],"sourceRoot":""}